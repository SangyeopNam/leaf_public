[{"content":"도입 처음 개발 블로그를 만들려고 했을때 찾아보니, 국내에서 많이 사용하는 개발 블로그에는 3가지 종류가 있었습니다.\nvelog tistory github 각각의 장단점을 살펴보고, 제가 깃허브 블로그를 선택한 이유에 대해서 설명하려고 합니다.\nvelog velopert(김민준) 님께서 개발하신 개발 블로그입니다. 플랫폼이 개발 블로그에 특화되어 있고, UI도 깔끔해서 블로깅을 할때 1순위로 고민되는 옵션입니다.\n장점 간편한 사용법과 블로깅\n사용법이 간편해서 블로깅에만 편하게 집중할 수 있습니다. 처음 블로깅을 시작하거나, 머리아픈 것을 싫어한다면 가장 추천되는 블로그인 이유입니다.\n불필요한 옵션 및 세팅 최소화\n1번과도 연결되는 부분인데, 별다른 옵션이나 기능이 없어서 다른 고민을 할 필요가 없습니다. 처음 글을 작성하면 별다른 세팅 없이도 조회수나 댓글 등을 쉽게 확인 가능합니다.\n다양한 개발자들의 생태계 구축\n훌륭한 개발자분들께서 이미 좋은 글들을 많이 남겨주고 계시고, 커뮤니티처럼 본인만의 의견이나 짤, 드립들도 심심치 않게 올라옵니다. 개발 커뮤니티답게 업계의 좋은 정보들도 많이 얻을 수 있고, 다른 분들의 글을 보며 좋은 자극을 받을 수 있습니다.\n단점 적은 옵션과 선택폭, 획일화된 디자인\n사실 장점 1, 2번에서 필연적으로 발생하는 단점입니다. 세팅이 간편하고 접근성이 쉬운 만큼, 개발자 본인이 선택할 수 있는 옵션은 많지 않습니다. 본인만의 블로그로 커스터마이징 하고 싶다면 한계가 있는 부분은 사실입니다. 또한, UI가 기본적으로 예쁘기는 하지만 본인만의 스타일이나 방향성 등을 보여주기는 힘듭니다. 게시글 기능에만 초점이 맞춰져 있기도 하고, 세팅할 수 있는 요소가 거의 없어 velog의 스타일로 획일화되는 것 같습니다.\n광고 불가능\n기본적으로 velopert님이 운영하시는 블로그이다 보니 광고를 통해 수익을 얻는 것이 불가능합니다. 광고수익을 기대하는 분들이 velog를 주저하는 이유 중 하나일 것 같습니다.\n통계 기능\n본인이 작성한 게시물에 대한 조회수나 좋아요 등에 대한 개수정도만 확인 가능하여 구체적인 통계 시스템을 구축하는 것은 힘들어 보입니다. 개인 블로그에 대해 좀더 철저히 관리하고 싶으면 망설여지는 부분입니다.\ntistory kakao에서 운영하는 블로그입니다. 2006년이라는 오랜 세월동안 국내의 메이저 블로그로 자리잡았고, 다양한 분야의 블로그와 본인만의 커스터마이징이 장점입니다.\n장점 자유로운 스킨 편집\n개발자라면 기본적인 마크업 언어는 많이 접해보셨을 것입니다. 마크업 언어를 통한 스킨편집을 지원하기 때문에 본인만의 스타일로 블로그를 꾸밀 수 있고, 특히 블로깅을 잘 하시는 분들을 보면 티스토리 블로그인지 깃허브 블로그인지 헷갈릴 정도로 예쁘게 커스터마이징한 블로그를 심심치 않게 볼 수 있습니다.\n소통 및 통계 기능\n기본적으로 댓글이나 구독 등 다른 사용자와의 소통을 위한 기능이 잘 되어 있습니다. 또한, 방문자에 대한 통계와 유입 경로 등을 상세히 분석할 수 있어, 본인의 블로그를 확장하는데 많은 도움을 얻을 수 있습니다.\n구글 애드센스 등 수익모델과의 연동\n구글 애드센스나 카카오 애드핏 등 광고 서비스와 쉽게 연동이 가능합니다. 광고를 통해 수익을 얻으시려는 분들은 많이 고민하게 되는 옵션 중 하나일 것 같습니다. 실제로 찾아보니 네이버 블로그보다 광고 연동이 잘 되어 티스토리를 사용한다는 분들도 많이 접할 수 있었습니다.\n단점 지나친 광고노출\n공부를 하기 위해 다른 티스토리 블로그에 들어가보면, 점점 광고가 많아지는 것 같은 느낌을 받습니다. 특히 어떤 블로그는 다른 탭이나 어플리케이션으로 이동했다가 돌아오면 전체화면을 가려버리는 악성 모달창(?)이 뜨기도 합니다. 이러한 광고 기능으로 인해 순수하게 정보 공유 목적으로 블로그를 운영하거나 정보를 얻으려는 사람들은 불편함을 느낄 것 같습니다.\n블로그 관리 의존성\n블로그 관리가 티스토리 고객센터에서 이루어지다 보니 결국 블로그의 생존성도 티스토리 고객센터에 의존하게 됩니다. 특정 게시글에 비정상적인 트래픽 용량이 발생하거나 신고를 많이 받은 블로그는 차단당한다는 글도 많이 보았고, 실제로 고객센터에서도 일일히 관리하기가 힘들다보니 일단 제재를 받기 시작하면 소명 등의 절차가 까다롭고 본인의 포스팅을 지키기가 어렵다고 합니다.\n많은 사용자에 따른 보안 및 기타 이슈\n개인적인 파일이나 정보 등을 함부로 블로그에 올리면 안되겠지만, 본인의 개인정보가 많은 사람들이 사용하고 어떤 정책으로 관리될지 모를 티스토리 서버의 db로 전송된다는 부분은 찝찝합니다.\n(사실 깃허브나 여타 블로그도 서버에 파일이 올라가는건 똑같긴 하지만, 티스토리는 좀더 많은 사람이 사용하다 보니 불안한 감이 있습니다.)\n그리고 국내에서 많은 트래픽이 발생하는 메이저 포털인 만큼, 여러 사람들에게 포스팅이 노출될 것이고 필연적으로 불필요한 충돌이나 문제(도배나 악성댓글 등)가 발생할 수도 있을 것 같습니다.\ngithub 장점 극강의 자유도, 확장의 용이성\n모든 기능을 커스터마이징 할 수 있습니다. 애초에 html을 만들어서 올려야 하기 때문에, html 형식을 벗어나지만 않는다면 모든 뷰를 수정할 수 있습니다. 특히 css를 잘 다룬다면, 본인만의 개성있는 포트폴리오 페이지를 제공하기에는 안성맞춤입니다.\n또한, 기능을 확장하려면 본인이 해당 기능을 직접 구현하거나, 외부 라이브러리 의존을 통해 구현할 수 있습니다. 최초에는 기능이 없었지만, 다양한 기능을 직접 추가하거나 삭제할 수 있습니다.\n레포지토리와의 연동\n정적 페이지 빌드를 위해 기본적으로 깃허브에 커밋을 해야 합니다. 커밋 기록 (잔디) 도 남길 수 있고, 무엇보다 깃허브가 제공하는 모든 버전관리, 이슈 트래킹 등을 그대로 사용할 수 있다는 점이 매력적입니다.\n경험\n사실 개발자로서 본인만의 페이지를 운영하는 경험은 향후 많은 도움이 될 것입니다. 직접 페이지를 빌드하거나 수정하고, 다른 유저의 피드백을 받고, 어떻게 하면 나의 페이지를 노출할 수 있을지 고민하는 일련의 과정이 개발자의 현업과도 일맥상통하는 부분이 있습니다.\n단점 초기 진입장벽\n모든 기능을 구현할 수 있다는 것은 반대로 말하면 모든 기능을 알아야 한다는 것입니다. 마크업 언어에 대한 이해는 기본이고, 각종 기능의 내부적인 기능을 알아야 구현이 가능하여 초기 세팅이나 공부하는 과정에서 많은 시간이 걸립니다.\n오버헤드\n단지 블로그 글을 작성하고 싶을 뿐인데, 수행하는 과정이 정말 많습니다. 로컬에서 글을 작성하고, (템플릿 프레임워크를 쓴다면)로컬 서버에서 확인 후 빌드하고, 깃에 커밋까지 해야 등록이 됩니다. 또한, 깃이 이를 연동하는데 2~3분 정도 소요되어 직접 결과를 확인하는데에도 많은 시간이 걸립니다.\n초기 유입과 확장\n다른 플랫폼에 비해 새로운 도메인에서 시작하다보니, 초기에 다른 사람들과 소통하기가 쉽지 않습니다. 당장 이 글을 쓰는 저도 제 글을 얼마나 읽어주실지 잘 모르겠습니다. 어느 정도 트래픽이 발생하기 위해서는 꾸준한 관리와 노력이 필요할 것 같습니다.\n개발 블로그 선택 저는 위의 장단점을 분석하면서 결국 깃허브 블로그를 운영하기로 마음먹었습니다.\n어차피 개발공부를 해야 했고, 나중에 현업이나 프로젝트에서 마주칠 문제라면 차라리 혼자 공부하면서 미리 부딪혀 보는게 낫겠다는 생각이었습니다.\n그리고 아직은 많은 사람들이 사용하는 블로그에 글을 작성하기에는 제 비루한 실력이 노출되는 부분도 걱정이 되었습니다.\n마지막으로, 백엔드 개발자로서 수정에는 닫혀있고 확장에는 열려있는 구조 1 를 선택하지 않을 수 없었습니다. (무엇보다 간지가 납니다.)\n결론 velog, tistory, github 블로그를 비교해본 결과, 저는 깃허브 블로그를 사용하기로 마음먹었습니다. 다음 포스팅에서는 여러 SSG(Static Site Generator) 도구 중 hugo를 도입하게 된 배경과 간략한 소개, 그리고 설치방법에 대해 알아보겠습니다.\nReferences OCP(Open Close Principal; 개방 폐쇄의 원칙)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://leaf-nam.github.io/posts/blog/%EA%B0%9C%EB%B0%9C_%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%9D%98_%EC%A2%85%EB%A5%98%EC%99%80_%EC%84%A0%ED%83%9D_240229/","summary":"도입 처음 개발 블로그를 만들려고 했을때 찾아보니, 국내에서 많이 사용하는 개발 블로그에는 3가지 종류가 있었습니다.\nvelog tistory github 각각의 장단점을 살펴보고, 제가 깃허브 블로그를 선택한 이유에 대해서 설명하려고 합니다.\nvelog velopert(김민준) 님께서 개발하신 개발 블로그입니다. 플랫폼이 개발 블로그에 특화되어 있고, UI도 깔끔해서 블로깅을 할때 1순위로 고민되는 옵션입니다.\n장점 간편한 사용법과 블로깅\n사용법이 간편해서 블로깅에만 편하게 집중할 수 있습니다. 처음 블로깅을 시작하거나, 머리아픈 것을 싫어한다면 가장 추천되는 블로그인 이유입니다.\n불필요한 옵션 및 세팅 최소화","title":"개발 블로그의 종류와 선택"},{"content":"도입 미루고 미루던 블로그를 이제야 만들었다. 사실 내가 블로그를 쓰게 될 것이라고는 전혀 생각지도 못했지만, 이왕 시작한거 열심히 써보려고 한다.\n첫 협업과 위키페이지 작성 블로그를 쓰게 된 가장 큰 계기는 첫 프로젝트에서 처음으로 협업을 하면서 느꼈던 생각들이었다.\n같은 팀원들끼리 공유해야 할 것도 많았고, 팀장으로서 소통의 창구가 필요한 것도 느끼고 있었기에 처음에는 짧은 지식으로나마 직접 위키페이지를 만들었다.\n(Vue.js로 로컬에서 라이브 서버를 띄워놓음\u0026hellip;)\n처음에는 나름 잘 만들었다고 뿌듯해 했지만,\n로컬에서만 작동하는 부분(같은 네트워크 대역을 쓸때만 접속이 가능) 수정사항이나 새로운 요구사항이 발생할 때마다 변경이 힘듦 팀원들도 사실 많이 이용하지는 않았는지 별로 피드백이 없었음 위의 이유(핑계)들로 프로젝트가 바빠지면서 점차 소홀히 관리하게 되었다.\n첫 실패와 다짐 EC2 서버에 별도로 포트를 잡아 해당 페이지를 올려버릴까도 생각했었지만, 변경내역 관리나 빌드 등에 공수가 너무 들 것 같아 포기했었다.\n하지만 프로젝트가 진행되면서 전역적인 설정이나 참고할만한 내용들을 올리는 창구는 통일되지 않았고, 비슷한 문제를 여러 번 설명하는 과정에서 확실히 시행착오들을 한군데에 정리해 둘 필요성이 있겠다는 생각이 들었다.\n또한, 나중에 어떤 기술을 잘 모르는 사람들에게 내가 쓴 블로그의 글과 함께 설명한다면, 훨씬 이해를 도울 수 있겠다는 것도 이유 중 하나였다.\n당시의 생각들과 실패를 반면교사 삼아, 이번에 마음먹고 며칠 고생해서 깃블로그를 만들었다. 아직 부족한 부분이 많지만 개선해나가는 과정에서 많이 배울 수 있을 것 같아 기대도 된다. 그리고 이렇게 내 지식을 정리하면서 느끼는 것은, 정리하거나 누군가에게 설명해보지 않고서는 내가 어떤 걸 알고 어떤 걸 정말 모르는지 판단하기 어렵다는 것이다.\n앞으로의 계획 기술 블로그 우선, 개발자로 진로를 굳힌 만큼 내 기술과 지식, 시행착오들을 잘 정리해두려고 한다. 나도 물론 참고하겠지만, 다른 사람들에게도 조금이나마 도움이 되기를 바라는 마음이다. 오픈소스의 첫 발걸음을 뗀 것 같아 설레는 마음도 있다.\nLanguages JAVA\n자바에 대해 기초를 배우기는 했지만, java8 이후부터 변경된 사항과 좀더 깊은 부분들은 아직 많이 부족하다는 것을 코드를 짜면서도 많이 느낀다. 가급적 많은 사람들에게 도움이 될 수 있도록 시행착오나, 정말 필요한 내용들에 대해서 정리해보려고 한다.\nOthers\n패러다임은 바뀌고 프로그래밍 언어는 계속 출시된다. 언젠가 자바와 스프링도 도태될 것이고, 더욱 멋지고 빠른 언어들이 계속 등장할 것이다. 다양한 언어가 있겠지만, 당장 알아보고 싶은건 Kotlin과 Elixir이다. 지금까지 배운 언어들도 정말 훌륭하고 멋진 기능들을 제공했지만, 똑똑한 개발자들이 만든 다른 언어들이 얼마나 대단한 기능을 제공할지 벌써 기대가 된다.\nSpring\n이 블로그 이름에서도 알 수 있듯이, 스프링은 나에게 많은 영감과 배움의 기회를 주었다. 스프링을 좀 더 깊이 알면 알수록, 객체지향에도 한발짝 다가가는 기분이 든다.\n스프링의 내부적인 동작들도 궁금하고, 특히 요즘은 스프링이 제공하는 어노테이션의 한계\n(ex. bean은 최대 얼마나 등록 가능한지, 이떄 어플리케이션에 부하가 어느정도 되는지)\n도 궁금해져서 언젠가 연구하고 정리해보고 싶다.\nDatabase\n아직 데이터베이스에 대한 지식은 정말 부족하다. JPA가 정말 너무 많이 도와주다보니 오히려 DB에 대해 너무 모르게 된 것이 아닌가 하는 생각도 든다.\n어차피 백엔드 개발자라면 결국 데이터와의 싸움을 하게 될 텐데, 나중에 후회하기 전에 미리 공부해두고 싶다.\nAlgorithm\n결국 컴퓨터와 대화를 잘하려면 그들의 생각을 배울 필요가 있다. 아직 부족하지만, 조금씩 알고리즘 문제도 풀면서 논리적인 사고를 하는 습관을 계속 익혀야겠다. 가능할지는 모르겠지만, 객체지향적으로 인터페이스를 설계하고 클래스를 구현하는 방식으로 알고리즘 문제를 푸는 시도도 해보고 싶다.\nDesign Pattern\n구조와 패턴을 잘 아는것은 그만큼 코드를 보는 눈을 넓혀주는 것 같다. 디자인 패턴에 대해 공부하고, 특히 실제로 어디에서 쓰이고 있는지 정리해보고 싶다.\nArchitecture\n코드를 짜면서 항상 잘 짜고 있는지 의구심이 들었다. 좋은 코드와 좋은 설계가 무엇인지 공부하고 실제로 코드에 적용하면서 배우는 시간을 가져볼 예정이다.\nCommunications\n군에 있을때부터 지독하게 얽혀있던 통신, 항상 어렵고 항상 모르겠지만 이제는 뭔가 익숙하다못해 친밀한 느낌마저도 든다. 나름 내 인생에 많은 부분을 차지했던 분야인만큼 잘 정리해두면 많은 사람들에게 도움이 될 수 있을 것 같다.\nInfrastructure\n인프라는 모든 서비스들이 제대로 동작하는 토대가 된다. 그만큼 중요한 분야이기 때문에 소홀히 할 수 없고, 트렌드도 자주 바뀌는만큼 계속 관심갖고 지켜볼 필요가 있을 것 같다.\nSecurity\n보안도 군에서부터 많이 따라다녔던 녀석이지만, 바쁘고 귀찮다는 핑계로 많이 소홀히 한적도 있었다. 배우면 배울수록 절대 소홀히 할 수 없는 부분이라고 생각해서 계속 공부해 나가려고 한다.\nEtc\n더 많은 분야들이 있겠지만, 우선 위의 분야들 위주로 정리해나가고자 한다. 하지만 스스로도 너무 여기저기 기웃거리는 타입임을 잘 아는지라 언제 새로운 태그가 생길런지는 모르겠다.\n취미 블로그 Diary or Plan\n매일 일기를 쓰는건 힘들겠지만, 주에 1번 혹은 달에 한번이라도 일기를 적어보려고 한다. 내 생각을 정리하는데 글쓰기 만큼 좋은것도 없는 것 같다. 그리고 앞으로의 계획이나 생각 등도 한곳에 정리해두고 싶다.\nCube\n요새 왜인지는 모르겠는데 어려서 했던 큐브가 재미있어서 조금씩 정리해보려고 한다. 너무 많은 시간을 뺏는 취미는 아니니까 시간날때 조금씩 하는 정도는 괜찮겠지..\n결론 프로젝트를 하면서 블로그의 필요성을 진득하게 느껴서 다양한 분야의 기술을 한곳에 정리하는 개발 블로그를 운영해보려 한다.\n🔥 시작은 미미하지만 많은 사람들이 믿고 찾아볼 수 있는 위키가 될 수 있도록 꾸준히 노력하자.\n","permalink":"https://leaf-nam.github.io/posts/%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC_%EC%93%B0%EA%B2%8C_%EB%90%9C_%EA%B3%84%EA%B8%B0%EC%99%80_%EC%95%9E%EC%9C%BC%EB%A1%9C%EC%9D%98_%EB%B0%A9%ED%96%A5%EC%84%B1_240228/","summary":"도입 미루고 미루던 블로그를 이제야 만들었다. 사실 내가 블로그를 쓰게 될 것이라고는 전혀 생각지도 못했지만, 이왕 시작한거 열심히 써보려고 한다.\n첫 협업과 위키페이지 작성 블로그를 쓰게 된 가장 큰 계기는 첫 프로젝트에서 처음으로 협업을 하면서 느꼈던 생각들이었다.\n같은 팀원들끼리 공유해야 할 것도 많았고, 팀장으로서 소통의 창구가 필요한 것도 느끼고 있었기에 처음에는 짧은 지식으로나마 직접 위키페이지를 만들었다.\n(Vue.js로 로컬에서 라이브 서버를 띄워놓음\u0026hellip;)\n처음에는 나름 잘 만들었다고 뿌듯해 했지만,\n로컬에서만 작동하는 부분(같은 네트워크 대역을 쓸때만 접속이 가능) 수정사항이나 새로운 요구사항이 발생할 때마다 변경이 힘듦 팀원들도 사실 많이 이용하지는 않았는지 별로 피드백이 없었음 위의 이유(핑계)들로 프로젝트가 바빠지면서 점차 소홀히 관리하게 되었다.","title":"블로그를 쓰게 된 계기와 앞으로의 방향성"}]